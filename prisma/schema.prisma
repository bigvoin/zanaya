generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  student
  teacher
  parent
  leader
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  role             Role
  student          Student?
  teacher          Teacher?
  parent           Parent?
  leader           Leader?
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Student {
  id           String          @id
  user         User            @relation(fields: [id], references: [id])
  classes      Class[]         @relation("StudentClasses")
  behavior     BehaviorPoint[]
  grades       Grade[]
  parent       Parent?         @relation(fields: [parentId], references: [id])
  parentId     String?
  transactions Transaction[]
}

model Teacher {
  id         String      @id
  user       User        @relation(fields: [id], references: [id])
  classrooms Classroom[]
  posts      Post[]
}

model Parent {
  id       String    @id
  user     User      @relation(fields: [id], references: [id])
  students Student[]
}

model Leader {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

model Classroom {
  id        String  @id @default(uuid())
  name      String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
  classes   Class[]
}

model Class {
  id          String    @id @default(uuid())
  name        String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  students    Student[] @relation("StudentClasses")
  grades      Grade[]
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Float
  type      String // e.g., reward, penalty, purchase
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
}

model Message {
  id          String   @id @default(uuid())
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String
  content     String
  createdAt   DateTime @default(now())
}

model Post {
  id        String   @id @default(uuid())
  content   String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  createdAt DateTime @default(now())
}

model BehaviorPoint {
  id        String   @id @default(uuid())
  reason    String
  value     Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
}

model Grade {
  id        String  @id @default(uuid())
  subject   String
  score     Float
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  class     Class   @relation(fields: [classId], references: [id])
  classId   String
}
